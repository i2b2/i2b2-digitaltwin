
--prepare user-defined type (table variable for cohort filtering) 
--if procedure already exists, it must be dropped first if changes are made to the user-defined type, as the procedure references the udt

-- IF OBJECT_ID(N'DBO.USP_DT_LOYALTYCOHORT') IS NOT NULL DROP PROCEDURE DBO.USP_DT_LOYALTYCOHORT;;

--DROP TYPE DBO.UDT_DT_LOYALTY_COHORTFILTER;

--CREATE TYPE DBO.UDT_DT_LOYALTY_COHORTFILTER AS TABLE (PATIENT_NUM INT, COHORT_NAME VARCHAR(100), INDEX_DT DATE)
--GO


-- ********************************************************
-- *           LOYALTY COHORT - See this publication:
-- * Klann JG, Henderson DW, Morris M, et al. A broadly applicable approach to enrich 
-- * electronic-health-record cohorts by identifying patients with complete data: a 
-- * multisite evaluation. J Am Med Inform Assoc Published Online First: 25 August 2023. 
-- * doi:10.1093/jamia/ocad166
-- **********************************************************/
--
-- Implements a loyalty cohort algorithm with the same general design defined in 
--   "External Validation of an Algorithm to Identify Patients with High Data-Completeness in Electronic Health Records for Comparative Effectiveness Research" by Lin et al.
-- Written primarily by Darren Henderson with contributions FROM: Jeff Klann, PhD; Andrew Cagan; Barbara Benoit
-- 
-- Calculates 20 variables over the baseline period and computes an overall score, the highest scoring individuals are an approximation of those most likely present for future follow-up
-- This script accepts an index_date and looks back n years previous to that date (baseline period). 
-- 
-- To run, EXEC USP_DT_LOYALTYCOHORT @indexDate = '20210201', @SITE='STE', @LOOKBACK_YEARS=1,  @demographic_facts=0, @GENDERED=0, @filter_by_existing_cohort=0, @COHORT_FILTER=@cfilter, @output=0
-- This will create two tables on your db, DT_LOYALTY_RESULT (line level data with variables and score presented for each patient) and DT_LOYALTY_RESULT_SUMMARY (summary table).
-- 
-- Exporting this is compatible with most SHRINE IRBs: select * FROM DT_LOYALTY_RESULT_SUMMARY where SUMMARY_DESCRIPTION='PERCENT SUBJECTS'
-- It is percentages, a predictive score, and an obfuscated count of total patients.
-- 
-- ***** Standard i2b2 table naming conventions are used - Observation_fact, concept_dimension, patient_dimension.
-- ***** Follow the README for more information on installing and running.
-- 
-- Though attempts were made to make this query as generally applicable as possible throughout, you may need to review "POSSIBLE EDITS". 
-- We left comments about throughout the body of the script. 
-- Please utilize CTRL-F and search for <PE. to go through the possible edits that might require your site to intervene.
-- 


CREATE PROC DBO.USP_DT_LOYALTYCOHORT
    @SITE VARCHAR(10) 
    ,@LOOKBACK_YEARS INT = 1 -- DEFAULT TO 1 YEAR 
    ,@DEMOGRAPHIC_FACTS BIT = 0 -- DEFAULT FALSE -- IF YOUR SITE STORES DEMOGRAPHIC FACTS IN OBSERVATION_FACT ALTER THIS PARAMETER TO TRUE 
    ,@GENDERED BIT = 0 -- DEFAULT TO NON GENDER VERSION 
    ,@COHORT_FILTER UDT_DT_LOYALTY_COHORTFILTER READONLY -- TABLE VARIABLE TO FILTER OUTPUT BY AN EXISTING COHORT 
    ,@OUTPUT bit = 1 -- DEFAULT TO SHOW FINAL OUTPUT 
AS

-- CHECK ANY CUSTOM LOCAL CODES ADDED TO DT_LOYALTY_PATHS AT <PE.1> AND <PE.2> - PLEASE SEE COMMENTS


SET NOCOUNT ON
SET XACT_ABORT ON

-- UNCOMMENT IF TESTING PROC BODY ALONE 
-- --DECLARE @SITE VARCHAR(10) = 'UKY' -- ALTER TO YOUR DESIRED SITE CODE 
-- --DECLARE @LOOKBACK_YEARS INT = 1
-- --DECLARE @demographic_facts BIT = 1
-- --DECLARE @GENDERED BIT = 0
-- --DECLARE @output BIT = 1
-- 
-- --DECLARE @COHORT_FILTER UDT_DT_LOYALTY_COHORTFILTER
-- 
-- --INSERT INTO @COHORT_FILTER (PATIENT_NUM, COHORT_NAME)
-- --SELECT DISTINCT PATIENT_NUM, cohort
-- --FROM [I2B2ACT].[4CEX2].[FourCE_LocalPatientSummary]
-- 
-- 
-- ENSURE TEMP IS CLEAR FROM PREVIOUS RUNS 
IF OBJECT_ID(N'tempdb..#COHORT_FILTER', N'U') IS NOT NULL DROP TABLE #COHORT_FILTER;
IF OBJECT_ID(N'tempdb..#DEMCONCEPT', N'U') IS NOT NULL DROP TABLE #DEMCONCEPT;
IF OBJECT_ID(N'tempdb..#INCLPAT', N'U') IS NOT NULL DROP TABLE #INCLPAT;
IF OBJECT_ID(N'tempdb..#INCLPAT_MULTIVISIT', N'U') IS NOT NULL DROP TABLE #INCLPAT_MULTIVISIT;
IF OBJECT_ID(N'tempdb..#NUM_DX_CODES', N'U') IS NOT NULL DROP TABLE #NUM_DX_CODES;
IF OBJECT_ID(N'tempdb..#MEDUSE_CODES', N'U') IS NOT NULL DROP TABLE #MEDUSE_CODES;
IF OBJECT_ID(N'tempdb..#VARIABLE_EXPANSION', N'U') IS NOT NULL DROP TABLE #VARIABLE_EXPANSION;
IF OBJECT_ID(N'tempdb..#COHORT', N'U') IS NOT NULL DROP TABLE #COHORT;
IF OBJECT_ID(N'tempdb..#COHORT_FLAGS_PSC', N'U') IS NOT NULL DROP TABLE #COHORT_FLAGS_PSC;
IF OBJECT_ID(N'tempdb..#COHORT_FLAGS_AFC', N'U') IS NOT NULL DROP TABLE #COHORT_FLAGS_AFC;
IF OBJECT_ID(N'tempdb..#COHORT_AGE_GRP', N'U') IS NOT NULL DROP TABLE #COHORT_AGE_GRP;
IF OBJECT_ID(N'tempdb..#AGE_GRP_PSC', N'U') IS NOT NULL DROP TABLE #AGE_GRP_PSC;
IF OBJECT_ID(N'tempdb..#AGE_GRP_AFC', N'U') IS NOT NULL DROP TABLE #AGE_GRP_AFC;
IF OBJECT_ID(N'tempdb..#CHARLSON_VISIT_BASE', N'U') IS NOT NULL DROP TABLE #CHARLSON_VISIT_BASE;
IF OBJECT_ID(N'tempdb..#CHARLSON_DX', N'U') IS NOT NULL DROP TABLE #CHARLSON_DX;
IF OBJECT_ID(N'tempdb..#COHORT_CHARLSON', N'U') IS NOT NULL DROP TABLE #COHORT_CHARLSON;
IF OBJECT_ID(N'tempdb..#CHARLSON_STATS', N'U') IS NOT NULL DROP TABLE #CHARLSON_STATS;

-- CONVERT UDT TABLE VARIABLE PARAMETER TO TEMP TABLE AND CREATE INDEXES 

SELECT * INTO #COHORT_FILTER FROM @COHORT_FILTER

CREATE CLUSTERED INDEX CI_COHORT_FILTER ON #COHORT_FILTER (PATIENT_NUM, INDEX_DT, COHORT_NAME)

DECLARE @COHORT_N INT = (SELECT COUNT(*) FROM #COHORT_FILTER)

-- START PROCESSING 
DECLARE @GENDER_YN CHAR(1) = IIF(@GENDERED=0,'N','Y')
DECLARE @OUTPUT_YN CHAR(1) = IIF(@output=0,'N','Y')

RAISERROR(N'i2b2 Loyalty Cohort. See doi:10.1093/jamia/ocad166.', 1, 1) with nowait;
RAISERROR(N'Please be prepared to share these debug messages if your site runs INTO any issues.', 1, 1) with nowait;
RAISERROR(N'STARTING ANALYSIS (COHORT_FILTER RECORDS=%d) -- SITE=%s, LOOKBACK_YR=%d, GENDER_DENOMINATORS=%s, OUTPUT=%s', 1, 1,@COHORT_N,@SITE,@LOOKBACK_YEARS,@gender_yn,@output_yn) with nowait;

DECLARE @START_TS DATETIME = GETDATE()
DECLARE @STEP_TS DATETIME 
DECLARE @ENDRUNTIME_MS INT, @STEPRUNTIME_MS INT
DECLARE @ROWS INT

-- NEW MULTI-VISIT FILTER - 20220228 DWH 

--RAISERROR(N'Starting ephemeral patient filter - Patients must have more than one visit to be considered "loyal"', 1, 1) with nowait;
SET @STEP_TS = GETDATE()

-- ;WITH CTE_MULTVISIT AS (
-- SELECT v.PATIENT_NUM, ENCOUNTER_NUM, CONVERT(DATE,START_DATE) START_DATE, CONVERT(DATE,END_DATE) END_DATE 
-- CONVERTING TO DATE TO AGGRESSIVELY DROP OUT ADMIN-LIKE ENCOUNTERS ON SAME DAY AND TREAT THEM AS OVERLAPPING  
-- FROM DBO.VISIT_DIMENSION v
-- inner JOIN #COHORT_filter c on c.PATIENT_NUM=v.PATIENT_NUM
-- WHERE v.PATIENT_NUM NOT IN (SELECT v.PATIENT_NUM FROM DBO.VISIT_DIMENSION v inner JOIN #COHORT_filter c on c.PATIENT_NUM=v.PATIENT_NUM GROUP BY v.PATIENT_NUM HAVING COUNT(DISTINCT ENCOUNTER_NUM) = 1) -- EXCLUDES EPHEMERAL ONE-VISIT PATIENTS 
-- )
-- SELECT DISTINCT A.PATIENT_NUM
-- INTO #INCLPAT_MULTIVISIT
-- FROM CTE_MULTVISIT A
--   LEFT JOIN CTE_MULTVISIT B
--     ON A.PATIENT_NUM = B.PATIENT_NUM
--     AND A.ENCOUNTER_NUM != B.ENCOUNTER_NUM
--     AND (A.START_DATE <= B.END_DATE AND A.END_DATE >= B.START_DATE) -- VISIT DATES OVERLAP IN SOME WAY 
-- WHERE B.ENCOUNTER_NUM IS NULL -- NO OVERLAPS - GOAL HERE IS TO ONLY INCLUDE PATIENTS THAT HAVE MULTIPLE ENCOUNTERS 
-- DON'T NEED TO COUNT ENCOUNTERS HERE.
--     IF THE PATIENT STILL HAS AT LEAST ONE ENCOUNTER AFTER DROPPING OUT THEIR ENCOUNTER THAT DID OVERLAP,
--     THEN WE CAN INFER THEY HAVE MULTIPLE ENCOUNTERS IN THE HEALTH CARE SYSTEM. THE FIRST PREDICATE IN CTE_MULTVISIT
--     REQUIRED THE PATIENT NOT BE IN THE "EPHEMERAL" PATIENT GROUP (PATIENTS WITH ONE ENCOUNTER_NUM IN ALL TIME).
--     SO BY THIS STEP, IF ENCOUNTERS THAT DO OVERLAP ARE DROPPED, THERE IS STILL AT LEAST ONE STANDALONE ENCOUNTER IN ADDITION
--     TO THOSE OVERLAPPED ENCOUNTERS - THUS AT MINIMUM >=3 ENCOUNTERS IN THE EHR. 
-- 
--  

--SELECT @ROWS=@@ROWCOUNT, @ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
--RAISERROR(N'Finish ephemeral patient filter - Rows: %d - Total Execution (ms): %d - Step Runtime (ms): %d', 1, 1, @ROWS, @ENDRUNTIME_MS, @STEPRUNTIME_MS) with nowait;

-- PRE-BUILD AN PATIENT INCLUSION TABLE FOR `HAVING A NON-DEMOGRAPHIC FACT DURING MEASURE PERIOD` 
-- include only patients with non-demographic concepts during the measure period
--    REQUIREMENT: @demographic_facts = 1
-- 

CREATE TABLE #INCLPAT (PATIENT_NUM INT PRIMARY KEY CLUSTERED)

IF(@demographic_facts=1) -- THE SITE STORES SOME KIND OF DEMOGRAPHIC FACT IN OBSERVATION_FACT -- WE WANT TO MAKE SURE THESE ARE EXCLUDED 
BEGIN
  RAISERROR(N'Starting #INCLPAT phase - @demographic_facts=1', 1, 1) with nowait;
  SET @STEP_TS = GETDATE()
  
  -- EXTRACT DEMOGRAPHIC CONCEPTS 
  SELECT DISTINCT CONCEPT_CD
    , SUBSTRING(CONCEPT_CD,1,CHARINDEX(':',CONCEPT_CD)-1) AS CONCEPT_PREFIX 
  INTO #DEMCONCEPT
  FROM DBO.CONCEPT_DIMENSION
  WHERE CONCEPT_PATH LIKE '\ACT\Demographics%'
    AND CONCEPT_CD != ''
  
  INSERT INTO #INCLPAT WITH(TABLOCK) (PATIENT_NUM)
  SELECT DISTINCT PATIENT_NUM
  -- DISTINCT list of patients left over FROM except operation would be patient-concept_cd key pairs for any other fact type 
  FROM (
  -- all patient-concept_cd key pairs during measure period 
  SELECT DISTINCT F.PATIENT_NUM, F.CONCEPT_CD
  FROM #COHORT_FILTER CF 
    JOIN DBO.OBSERVATION_FACT F
      ON CF.PATIENT_NUM = F.PATIENT_NUM
  WHERE F.START_DATE >= CONVERT(DATETIME,DATEADD(YY,-@LOOKBACK_YEARS,CF.INDEX_DT)) AND F.START_DATE < CONVERT(DATETIME,DATEADD(DD,1,CF.INDEX_DT)) -- ALTERED OCT2022 - BASE NON-DEMOGRAPHIC FACT LOOKUP ON MEASURE PERIOD 
  EXCEPT
  -- exclude patient-concept_cd demographic pairs 
  SELECT DISTINCT F.PATIENT_NUM, F.CONCEPT_CD
  FROM #COHORT_FILTER CF
    JOIN DBO.OBSERVATION_FACT F
      ON CF.PATIENT_NUM = F.PATIENT_NUM
    JOIN #DEMCONCEPT D
      ON F.CONCEPT_CD = D.CONCEPT_CD
  WHERE F.START_DATE >= CONVERT(DATETIME,DATEADD(YY,-@LOOKBACK_YEARS,CF.INDEX_DT)) AND F.START_DATE < CONVERT(DATETIME,DATEADD(DD,1,CF.INDEX_DT)) -- ALTERED OCT2022 - BASE NON-DEMOGRAPHIC FACT LOOKUP ON MEASURE PERIOD 
  )OFMINUSDEM
  --INTERSECT
  --SELECT PATIENT_NUM FROM #INCLPAT_MULTIVISIT -- FILTER BY THE NON-EPHEMERAL PATIENT LIST 

  SET @ROWS = @@ROWCOUNT

END

IF(@demographic_facts=0) -- THE SITE DOES NOT STORE DEMOGRAPHIC FACTS OF ANY KIND IN OBSERVATION_FACT -- JUST NEED TO CONFIRM A FACT EXISTS DURING THE MEASURE PERIOD 
BEGIN
  
  RAISERROR(N'Starting #INCLPAT phase - @demographic_facts=0', 1, 1) with nowait;
  SET @STEP_TS = GETDATE()

  INSERT INTO #INCLPAT WITH(TABLOCK)(PATIENT_NUM)
  SELECT DISTINCT F.PATIENT_NUM
  FROM #COHORT_FILTER CF 
    JOIN DBO.OBSERVATION_FACT F
      ON CF.PATIENT_NUM = F.PATIENT_NUM
  WHERE F.START_DATE >= CONVERT(DATETIME,DATEADD(YY,-@LOOKBACK_YEARS,CF.INDEX_DT)) AND F.START_DATE < CONVERT(DATETIME,DATEADD(DD,1,CF.INDEX_DT)) -- ALTERED OCT2022 - BASE NON-DEMOGRAPHIC FACT LOOKUP ON MEASURE PERIOD 
--  INTERSECT
--  SELECT PATIENT_NUM FROM #INCLPAT_MULTIVISIT -- FILTER BY THE NON-EPHEMERAL PATIENT LIST 

  SET @ROWS = @@ROWCOUNT
END

SELECT @ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
RAISERROR(N'Finish #INCLPAT - Rows: %d - Total Execution (ms): %d - Step Runtime (ms): %d', 1, 1, @ROWS, @ENDRUNTIME_MS, @STEPRUNTIME_MS) with nowait;

-- FINISH PRE-BUILD ACT MODEL 

CREATE TABLE #COHORT (
COHORT_NAME VARCHAR(100) NOT NULL,
PATIENT_NUM INT NOT NULL,
DEATH_DT DATE NULL,
SEX VARCHAR(50) NULL,
AGE INT NULL,
NUM_DX1 BIT NOT NULL DEFAULT 0,
NUM_DX2 BIT NOT NULL DEFAULT 0,
MED_USE1 BIT NOT NULL DEFAULT 0,
MED_USE2 BIT NOT NULL DEFAULT 0,
MAMMOGRAPHY BIT NOT NULL DEFAULT 0,
PAP_TEST BIT NOT NULL DEFAULT 0,
PSA_TEST BIT NOT NULL DEFAULT 0,
COLONOSCOPY BIT NOT NULL DEFAULT 0,
FECAL_OCCULT_TEST BIT NOT NULL DEFAULT 0,
FLU_SHOT BIT NOT NULL DEFAULT 0,
PNEUMOCOCCAL_VACCINE BIT NOT NULL DEFAULT 0,
BMI BIT NOT NULL DEFAULT 0,
A1C BIT NOT NULL DEFAULT 0,
MEDICAL_EXAM BIT NOT NULL DEFAULT 0,
INP1_OPT1_VISIT BIT NOT NULL DEFAULT 0,
OPT2_VISIT BIT NOT NULL DEFAULT 0,
ED_VISIT BIT NOT NULL DEFAULT 0,
MDVISIT_PNAME2 BIT NOT NULL DEFAULT 0,
MDVISIT_PNAME3 BIT NOT NULL DEFAULT 0,
ROUTINE_CARE_2 BIT NOT NULL DEFAULT 0,
PREDICTED_SCORE FLOAT NOT NULL DEFAULT -0.010,
LAST_VISIT DATE NULL,
INDEX_DT DATE NULL,
PRIMARY KEY (COHORT_NAME, PATIENT_NUM)
)

-- EXTRACT COHORT AND VISIT TYPE FLAGS 
SET @STEP_TS = GETDATE()

INSERT INTO #COHORT WITH(TABLOCK) (COHORT_NAME, PATIENT_NUM, AGE, SEX, INP1_OPT1_VISIT, OPT2_VISIT, ED_VISIT, LAST_VISIT, INDEX_DT)
SELECT COHORT_NAME, C.PATIENT_NUM
  , FLOOR(DATEDIFF(DD,P.BIRTH_DATE,INDEX_DT)/365.25) AGE
  , REPLACE(P.SEX_CD,'DEM|SEX:','') SEX
  , MAX(INP1_OPT1_VISIT) AS INP1_OPT1_VISIT, MAX(OPT2_VISIT) OPT2_VISIT, MAX(ED_VISIT), MAX(LAST_VISIT), INDEX_DT
FROM (
-- 1 INPATIENT OR 1 OUTPATIENT VISIT DURING THE MEASURED LOOKBACK PERIOD 
SELECT CF.COHORT_NAME, P.PATIENT_NUM, 1 AS INP1_OPT1_VISIT, 0 AS OPT2_VISIT, 0 AS ED_VISIT, NULL AS LAST_VISIT, CF.INDEX_DT
FROM #INCLPAT P
  JOIN #COHORT_FILTER CF
    ON P.PATIENT_NUM = CF.PATIENT_NUM
  JOIN DBO.VISIT_DIMENSION V 
    ON P.PATIENT_NUM = V.PATIENT_NUM
    AND V.START_DATE >= CONVERT(DATETIME,DATEADD(YY,-@LOOKBACK_YEARS,CF.INDEX_DT)) AND V.START_DATE < CONVERT(DATETIME,DATEADD(DD,1,CF.INDEX_DT)) -- ALTERED OCT2022 - BASE NON-DEMOGRAPHIC FACT LOOKUP ON MEASURE PERIOD 
    AND V.INOUT_CD IN (SELECT VD.C_BASECODE
                        FROM DBO.ACT_VISIT_DETAILS_V41 VD
                          JOIN DBO.DT_LOYALTY_PATHS LCP
                            ON VD.C_FULLNAME LIKE CONCAT(LCP.CONCEPT_PATH,'%')
                            AND LCP.FEATURE_NAME = 'INP1_OPT1_VISIT'
                        UNION 
                        SELECT SITE_SPECIFIC_CODE
                        FROM DBO.DT_LOYALTY_PATHS
                        WHERE FEATURE_NAME = 'INP1_OPT1_VISIT'
                          AND CODE_TYPE = 'SITE'
                          AND ISNULL(SITE_SPECIFIC_CODE,'') != '')
GROUP BY CF.COHORT_NAME, P.PATIENT_NUM, CF.INDEX_DT
UNION ALL
-- AT LEAST 2 OUTPATIENT VISITS DURING THE MEASURED LOOKBACK PERIOD 
SELECT CF.COHORT_NAME, P.PATIENT_NUM, 0, 1 AS OPT2_VISIT, 0, NULL, CF.INDEX_DT
FROM #INCLPAT P
  JOIN #COHORT_FILTER CF
    ON P.PATIENT_NUM = CF.PATIENT_NUM
  JOIN DBO.VISIT_DIMENSION V 
    ON P.PATIENT_NUM = V.PATIENT_NUM
    AND V.START_DATE >= CONVERT(DATETIME,DATEADD(YY,-@LOOKBACK_YEARS,CF.INDEX_DT)) AND V.START_DATE < CONVERT(DATETIME,DATEADD(DD,1,CF.INDEX_DT)) -- ALTERED OCT2022 - BASE NON-DEMOGRAPHIC FACT LOOKUP ON MEASURE PERIOD 
    AND V.INOUT_CD IN (SELECT VD.C_BASECODE
                        FROM DBO.ACT_VISIT_DETAILS_V41 VD
                          JOIN DBO.DT_LOYALTY_PATHS LCP
                            ON VD.C_FULLNAME LIKE CONCAT(LCP.CONCEPT_PATH,'%')
                            AND LCP.FEATURE_NAME = 'OPT2_VISIT'
                        UNION 
                        SELECT SITE_SPECIFIC_CODE
                        FROM DBO.DT_LOYALTY_PATHS
                        WHERE FEATURE_NAME = 'OPT2_VISIT'
                          AND CODE_TYPE = 'SITE'
                          AND ISNULL(SITE_SPECIFIC_CODE,'') != '')
GROUP BY CF.COHORT_NAME, P.PATIENT_NUM, CF.INDEX_DT
HAVING COUNT(*) >= 2
UNION ALL
-- AT LEAST 1 ED VISIT DURING THE MEASURED LOOKBACK PERIOD 
SELECT CF.COHORT_NAME, P.PATIENT_NUM, 0, 0, 1 AS ED_VISIT, NULL, CF.INDEX_DT
FROM #INCLPAT P
  JOIN #COHORT_FILTER CF
    ON P.PATIENT_NUM = CF.PATIENT_NUM
  JOIN DBO.VISIT_DIMENSION V 
    ON P.PATIENT_NUM = V.PATIENT_NUM
    AND V.START_DATE >= CONVERT(DATETIME,DATEADD(YY,-@LOOKBACK_YEARS,CF.INDEX_DT)) AND V.START_DATE < CONVERT(DATETIME,DATEADD(DD,1,CF.INDEX_DT)) -- ALTERED OCT2022 - BASE NON-DEMOGRAPHIC FACT LOOKUP ON MEASURE PERIOD 
    AND V.INOUT_CD IN (SELECT VD.C_BASECODE
                        FROM DBO.ACT_VISIT_DETAILS_V41 VD
                          JOIN DBO.DT_LOYALTY_PATHS LCP
                            ON VD.C_FULLNAME LIKE CONCAT(LCP.CONCEPT_PATH,'%')
                            AND LCP.FEATURE_NAME = 'ED_VISIT'
                        UNION 
                        SELECT SITE_SPECIFIC_CODE
                        FROM DBO.DT_LOYALTY_PATHS
                        WHERE FEATURE_NAME = 'ED_VISIT'
                          AND CODE_TYPE = 'SITE'
                          AND ISNULL(SITE_SPECIFIC_CODE,'') != '')
GROUP BY CF.COHORT_NAME, P.PATIENT_NUM, CF.INDEX_DT
UNION ALL
-- LAST VISIT 
SELECT CF.COHORT_NAME, P.PATIENT_NUM, 0, 0, 0, MAX(V.START_DATE) AS LAST_VISIT, CF.INDEX_DT
FROM #INCLPAT P
  JOIN #COHORT_FILTER CF
    ON P.PATIENT_NUM = CF.PATIENT_NUM
  JOIN DBO.VISIT_DIMENSION V 
    ON P.PATIENT_NUM = V.PATIENT_NUM
    AND V.START_DATE >= CONVERT(DATETIME,DATEADD(YY,-@LOOKBACK_YEARS,CF.INDEX_DT)) AND V.START_DATE < CONVERT(DATETIME,DATEADD(DD,1,CF.INDEX_DT)) -- ALTERED OCT2022 - BASE NON-DEMOGRAPHIC FACT LOOKUP ON MEASURE PERIOD 
GROUP BY CF.COHORT_NAME, P.PATIENT_NUM, CF.INDEX_DT
)C JOIN DBO.PATIENT_DIMENSION P
  ON C.PATIENT_NUM = P.PATIENT_NUM
GROUP BY COHORT_NAME, C.PATIENT_NUM, REPLACE(P.SEX_CD,'DEM|SEX:',''), FLOOR(DATEDIFF(DD,P.BIRTH_DATE,INDEX_DT)/365.25), INDEX_DT

-- FINISH COHORT VISIT TYPE PREP 
SELECT @ROWS=@@ROWCOUNT,@ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
RAISERROR(N'Cohort and Visit Type variables - Rows: %d - Total Execution (ms): %d - Step Runtime (ms): %d', 1, 1, @ROWS, @ENDRUNTIME_MS, @STEPRUNTIME_MS) with nowait;

-- OCT2022 -- ALTERATION: NO LONGER FORCEFULLY DROP PATIENTS WITH NON-NULL DEATH DATES - A NEW COLUMN WILL BE ADDED TO THE OUTPUT FOR DEATH_DT AND CAN BE UTILIZED IN THE ANALYSIS AS NECESSARY 
-- --DELETE FROM #COHORT WHERE PATIENT_NUM IN (SELECT PATIENT_NUM FROM PATIENT_DIMENSION WHERE DEATH_DATE IS NOT NULL) -- EXCLUDE DECEASED 
-- --SELECT @ROWS=@@ROWCOUNT
-- --RAISERROR(N'Dropping patients with a non-null death_date. The script is not currently designed for retrospective studies that included deceased patients. - Rows: %d', 1, 1, @ROWS) with nowait;
-- 
-- HAVE TO CENSOR BAD BIRTH_DATE DATA FOR AGE_GRP STEPS LATER 
DELETE FROM #COHORT WHERE AGE IS NULL

SELECT @ROWS=@@ROWCOUNT

IF @ROWS > 0
  RAISERROR(N'Dropping patients with null birth_date - Rows: %d', 1, 1, @ROWS) with nowait;

-- DROP PEDIATRIC CASES - THE LOYALTY COHORT IS BASED OFF WORK BASED ON A MEDICARE POPULATION AND WE CURRENTLY LACK GOOD PROXIES FOR PEDIATRIC CASES FOR SOME OF THE VARIABLES/COEFFICIENTS 
DELETE FROM #COHORT WHERE AGE <= 18

SELECT @ROWS=@@ROWCOUNT

IF @ROWS > 0
  RAISERROR(N'Dropping pediatric cases - The script is not currently designed for Age<=18 - Rows: %d', 1, 1, @ROWS) with nowait;


-- COHORT FLAGS PSC BLOCK 
SET @STEP_TS = GETDATE()

;WITH CTE_PARAMS AS (
SELECT DISTINCT FEATURE_NAME, CONCEPT_CD, CODE_TYPE --[CONCEPT_PATH], 
FROM DBO.DT_LOYALTY_PATHS L, DBO.CONCEPT_DIMENSION C
WHERE C.CONCEPT_PATH LIKE L.CONCEPT_PATH+'%'  --JGK: MUST SUPPORT LOCAL CHILDREN
AND CODE_TYPE IN ('DX','PX','LAB','MEDS','SITE') -- <PE.1> IF YOUR SITE IS MANAGING ANY SITE SPECIFIC CODES FOR THE FOLLOWING DOMAINS SET THEIR CODE_TYPE = 'SITE' IN DBO.DT_LOYALTY_PATHS </PE.1> 
AND (L.CONCEPT_PATH <> '**Not Found' AND L.CONCEPT_PATH IS NOT NULL)
) 
, CTE_FEATURE_OCCUR AS (
SELECT C.COHORT_NAME, O.PATIENT_NUM, C.INDEX_DT, P.[FEATURE_NAME]
  -- ALTERED THE MD visit variables to ignore DISTINCT provider_id to allow it to count at least DISTINCT visit dates at sites that only load '@' for PROVIDER_ID 
  , CASE --WHEN FEATURE_NAME = 'MD visit' THEN COUNT(DISTINCT CHECKSUM(CONVERT(DATE,O.START_DATE),PROVIDER_ID))
         WHEN FEATURE_NAME IN ('MDVISIT_PNAME2','MDVISIT_PNAME3','NUM_DX1','NUM_DX2','MED_USE1','MED_USE2') THEN COUNT(DISTINCT CONVERT(DATE,O.START_DATE)) -- FOR THE MD VISIT, NUM_DX, AND MEDUSE DOMAINS - WE COUNT DISTINCT VISIT DATES 
         ELSE COUNT(*) END OCCUR -- FOR OTHER DOMAINS WE COUNT RAW FACT OCCURRENCE IN FACT TABLE 
  , CASE WHEN FEATURE_NAME IN ('MDVISIT_PNAME2','MDVISIT_PNAME3','NUM_DX1','NUM_DX2','MED_USE1','MED_USE2')
         THEN REPLACE(REPLACE(REPLACE(FEATURE_NAME,'MDVISIT_PNAME',''),'NUM_DX',''),'MED_USE','') ELSE NULL END AS THRESHOLD
FROM #COHORT C 
  JOIN DBO.OBSERVATION_FACT O
    ON C.PATIENT_NUM = O.PATIENT_NUM
  JOIN CTE_PARAMS p
    ON O.CONCEPT_CD = P.CONCEPT_CD
WHERE O.START_DATE >= CONVERT(DATETIME,DATEADD(YY,-@LOOKBACK_YEARS,C.INDEX_DT)) AND O.START_DATE < CONVERT(DATETIME,DATEADD(DD,1,C.INDEX_DT)) -- ALTERED OCT2022 - BASE NON-DEMOGRAPHIC FACT LOOKUP ON MEASURE PERIOD 
GROUP BY C.COHORT_NAME, O.PATIENT_NUM, C.INDEX_DT, P.[FEATURE_NAME]
)
, CTE_PSC AS (
SELECT VE.COHORT_NAME, VE.PATIENT_NUM, INDEX_DT, VE.VARIABLE_NAME, VE.OCCUR
  , PSC.COEFF
  , -0.010+SUM(PSC.COEFF*VE.OCCUR) OVER (PARTITION BY VE.PATIENT_NUM,VE.COHORT_NAME,VE.INDEX_DT ORDER BY (SELECT 1)) Predicted_Score
FROM (
  -- THE VARIABLES MDVISIT_PNAME2, NumDX1, and MED_USE1 variables were designed to be equality comparisons 
  SELECT FO.COHORT_NAME, FO.PATIENT_NUM, INDEX_DT, FO.FEATURE_NAME AS VARIABLE_NAME, IIF(FO.OCCUR=FO.THRESHOLD,1,0) OCCUR
  FROM CTE_FEATURE_OCCUR FO
  WHERE FEATURE_NAME IN ('MDVISIT_PNAME2','NUM_DX1','MED_USE1')
  UNION ALL
  -- THE VARIABLES MDVISIT_PNAME3, NumDX2, and MED_USE2 variables were designed to be greater than or equal to comparisons 
  SELECT FO.COHORT_NAME, FO.PATIENT_NUM, INDEX_DT, FO.FEATURE_NAME AS VARIABLE_NAME, IIF(FO.OCCUR>=FO.THRESHOLD,1,0) OCCUR
  FROM CTE_FEATURE_OCCUR FO
  WHERE FEATURE_NAME IN ('MDVISIT_PNAME3','NUM_DX2','MED_USE2')
  UNION ALL
  -- All other variables were simply if present then true 
  SELECT FO.COHORT_NAME, FO.PATIENT_NUM, INDEX_DT, FO.FEATURE_NAMe AS VARIABLE_NAME, IIF(FO.OCCUR>0,1,0) OCCUR
  FROM CTE_FEATURE_OCCUR FO
  WHERE FEATURE_NAME NOT IN ('MDVISIT_PNAME2','MDVISIT_PNAME3','NUM_DX1','NUM_DX2','MED_USE1','MED_USE2')
  UNION ALL
  SELECT COHORT_NAME, PATIENT_NUM, INDEX_DT, 'ROUTINE_CARE_2' as VARIABLE_NAME, 1 AS OCCUR
  FROM CTE_FEATURE_OCCUR FO
  WHERE FEATURE_NAME IN ('MEDICAL_EXAM','MAMMOGRAPHY','PSA_TEST','COLONOSCOPY','FECAL_OCCULT_TEST','FLU_SHOT','PNEUMOCOCCAL_VACCINE','A1C','BMI')
  GROUP BY COHORT_NAME, PATIENT_NUM, INDEX_DT
  HAVING SUM(IIF(FO.OCCUR>0,1,0)) >= 2
  UNION ALL
  SELECT COHORT_NAME, PATIENT_NUM, INDEX_DT, 'INP1_OPT1_VISIT' AS VARIABLE_NAME, INP1_OPT1_VISIT FROM #COHORT WHERE INP1_OPT1_VISIT != 0
  UNION ALL
  SELECT COHORT_NAME, PATIENT_NUM, INDEX_DT, 'OPT2_VISIT' AS VARIABLE_NAME, OPT2_VISIT FROM #COHORT WHERE OPT2_VISIT != 0
  UNION ALL
  SELECT COHORT_NAME, PATIENT_NUM, INDEX_DT, 'ED_VISIT' AS VARIABLE_NAME, ED_VISIT FROM #COHORT WHERE ED_VISIT != 0
)VE JOIN DBO.DT_LOYALTY_PSCOEFF PSC
  on VE.VARIABLE_NAME = PSC.FIELD_NAME
)
SELECT COHORT_NAME, PATIENT_NUM,
MAX(SEX) AS SEX,
MAX(AGE) AS AGE,
MAX(NUM_DX1) AS NUM_DX1,
MAX(NUM_DX2) AS NUM_DX2,
MAX(MED_USE1) AS MED_USE1,
MAX(MED_USE2) AS MED_USE2,
MAX(MAMMOGRAPHY) AS MAMMOGRAPHY,
MAX(PAP_TEST) AS PAP_TEST,
MAX(PSA_TEST) AS PSA_TEST,
MAX(COLONOSCOPY) AS COLONOSCOPY,
MAX(FECAL_OCCULT_TEST) AS FECAL_OCCULT_TEST,
MAX(FLU_SHOT) AS FLU_SHOT,
MAX(PNEUMOCOCCAL_VACCINE) AS PNEUMOCOCCAL_VACCINE,
MAX(BMI) AS BMI,
MAX(A1C) AS A1C,
MAX(MEDICAL_EXAM) AS MEDICAL_EXAM,
MAX(INP1_OPT1_VISIT) AS INP1_OPT1_VISIT,
MAX(OPT2_VISIT) AS OPT2_VISIT,
MAX(ED_VISIT) AS ED_VISIT,
MAX(MDVISIT_PNAME2) AS MDVISIT_PNAME2,
MAX(MDVISIT_PNAME3) AS MDVISIT_PNAME3,
MAX(ROUTINE_CARE_2) AS ROUTINE_CARE_2,
MAX(PREDICTED_SCORE) AS PREDICTED_SCORE,
MAX(LAST_VISIT) AS LAST_VISIT,
INDEX_DT
INTO #COHORT_FLAGS_PSC
FROM (
SELECT COHORT_NAME, PATIENT_NUM, SEX, AGE, NUM_DX1, NUM_DX2, MED_USE1, MED_USE2, MAMMOGRAPHY, PAP_TEST, PSA_TEST, COLONOSCOPY
  , FECAL_OCCULT_TEST, FLU_SHOT, PNEUMOCOCCAL_VACCINE
  , BMI, A1C, MEDICAL_EXAM, INP1_OPT1_VISIT, OPT2_VISIT, ED_VISIT, MDVISIT_PNAME2, MDVISIT_PNAME3
  , ROUTINE_CARE_2
  , PREDICTED_SCORE
  , LAST_VISIT
  , INDEX_DT
FROM #COHORT 
UNION ALL 
SELECT COHORT_NAME, PATIENT_NUM, NULL AS SEX, NULL AS AGE
  , NUM_DX1, NUM_DX2, MED_USE1, MED_USE2, MAMMOGRAPHY, PAP_TEST, PSA_TEST, COLONOSCOPY, FECAL_OCCULT_TEST, FLU_SHOT, PNEUMOCOCCAL_VACCINE
  , BMI, A1C, MEDICAL_EXAM, INP1_OPT1_VISIT, OPT2_VISIT, ED_VISIT, MDVISIT_PNAME2, MDVISIT_PNAME3
  , ROUTINE_CARE_2, PREDICTED_SCORE
  , NULL AS LAST_VISIT
  , INDEX_DT
FROM (
SELECT * 
FROM CTE_PSC
)U
PIVOT
(MAX(OCCUR) FOR VARIABLE_NAME IN (NUM_DX1, NUM_DX2, MED_USE1, MED_USE2, MAMMOGRAPHY, PAP_TEST, PSA_TEST, COLONOSCOPY, FECAL_OCCULT_TEST, FLU_SHOT, PNEUMOCOCCAL_VACCINE
, BMI, A1C, MEDICAL_EXAM, INP1_OPT1_VISIT, OPT2_VISIT, ED_VISIT, MDVISIT_PNAME2, MDVISIT_PNAME3,ROUTINE_CARE_2))P
)COHORT_FLAGS
GROUP BY COHORT_NAME, PATIENT_NUM, INDEX_DT

TRUNCATE TABLE #COHORT

INSERT INTO #COHORT (COHORT_NAME, PATIENT_NUM, DEATH_DT, SEX, AGE, NUM_DX1, NUM_DX2, MED_USE1, MED_USE2, MAMMOGRAPHY, PAP_TEST, PSA_TEST, COLONOSCOPY, FECAL_OCCULT_TEST, FLU_SHOT, PNEUMOCOCCAL_VACCINE, BMI, A1C, MEDICAL_EXAM, INP1_OPT1_VISIT, OPT2_VISIT, ED_VISIT, MDVISIT_PNAME2, MDVISIT_PNAME3 , ROUTINE_CARE_2 , PREDICTED_SCORE , LAST_VISIT, INDEX_DT)
SELECT COHORT_NAME, CF.PATIENT_NUM, P.DEATH_DATE, SEX, AGE, NUM_DX1, NUM_DX2, MED_USE1, MED_USE2, MAMMOGRAPHY, PAP_TEST, PSA_TEST, COLONOSCOPY, FECAL_OCCULT_TEST, FLU_SHOT, PNEUMOCOCCAL_VACCINE, BMI, A1C, MEDICAL_EXAM, INP1_OPT1_VISIT, OPT2_VISIT, ED_VISIT, MDVISIT_PNAME2, MDVISIT_PNAME3
  , ROUTINE_CARE_2, PREDICTED_SCORE, LAST_VISIT, INDEX_DT
FROM #COHORT_FLAGS_PSC CF
  JOIN DBO.PATIENT_DIMENSION P
    ON CF.PATIENT_NUM = P.PATIENT_NUM

SELECT @ROWS=@@ROWCOUNT,@ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
RAISERROR(N'Cohort Flags - Rows: %d - Total Execution (ms): %d  - Step Runtime (ms): %d', 1, 1, @ROWS, @ENDRUNTIME_MS, @STEPRUNTIME_MS) with nowait;

-- Cohort Agegrp - Makes Predictive Score filtering easier in final step if pre-calculated 
SET @STEP_TS = GETDATE()

SELECT * 
INTO #COHORT_AGE_GRP
FROM (
select @SITE as SITE
,COHORT_NAME
,PATIENT_NUM
,DEATH_DT
,INDEX_DT
,SEX
,AGE
,CAST(case when ISNULL(AGE,0)< 65 then 'UNDER 65' 
     when AGE>=65 then 'OVER 65' else null end AS VARCHAR(20)) as AGE_GRP
,NUM_DX1             
,NUM_DX2             
,MED_USE1            
,MED_USE2            
,MAMMOGRAPHY         
,PAP_TEST            
,PSA_TEST            
,COLONOSCOPY         
,FECAL_OCCULT_TEST    
,FLU_SHOT            
,PNEUMOCOCCAL_VACCINE
,BMI                 
,A1C                 
,MEDICAL_EXAM        
,INP1_OPT1_VISIT     
,OPT2_VISIT          
,ED_VISIT            
,MDVISIT_PNAME2      
,MDVISIT_PNAME3      
,ROUTINE_CARE_2      
,PREDICTED_SCORE     
FROM #COHORT
UNION 
select @SITE as SITE
,COHORT_NAME
,PATIENT_NUM
,DEATH_DT
,INDEX_DT
,SEX
,AGE
,'ALL PATIENTS' AS AGE_GRP
,NUM_DX1             
,NUM_DX2             
,MED_USE1            
,MED_USE2            
,MAMMOGRAPHY         
,PAP_TEST            
,PSA_TEST            
,COLONOSCOPY         
,FECAL_OCCULT_TEST    
,FLU_SHOT            
,PNEUMOCOCCAL_VACCINE
,BMI                 
,A1C                 
,MEDICAL_EXAM        
,INP1_OPT1_VISIT     
,OPT2_VISIT          
,ED_VISIT            
,MDVISIT_PNAME2      
,MDVISIT_PNAME3      
,ROUTINE_CARE_2      
,PREDICTED_SCORE 
FROM #COHORT
)CAG;

SELECT @ROWS=@@ROWCOUNT,@ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
RAISERROR(N'Prepare #COHORT_AGE_GRP - Rows: %d - Total Execution (ms): %d  - Step Runtime (ms): %d', 1, 1, @ROWS, @ENDRUNTIME_MS, @STEPRUNTIME_MS) with nowait;

-- Calculate Predictive Score Cutoff by over Agegroups 
SET @STEP_TS = GETDATE()

SELECT COHORT_NAME, AGE_GRP, MIN(PREDICTED_SCORE) PREDICTIVE_SCORE_CUTOFF
INTO #AGE_GRP_PSC
FROM (
SELECT COHORT_NAME, AGE_GRP, PREDICTED_SCORE, NTILE(5) OVER (PARTITION BY COHORT_NAME, AGE_GRP ORDER BY PREDICTED_SCORE DESC) AS SCORE_RANK
FROM(
SELECT COHORT_NAME, AGE_GRP, predicted_score
FROM #COHORT_AGE_GRP
)SCORES
)M
WHERE SCORE_RANK=1
GROUP BY COHORT_NAME, AGE_GRP

SELECT @ROWS=@@ROWCOUNT,@ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
RAISERROR(N'Prepare #AGE_GRP_PSC - Rows: %d - Total Execution (ms): %d  - Step Runtime (ms): %d', 1, 1, @ROWS, @ENDRUNTIME_MS, @STEPRUNTIME_MS) with nowait;

-- Calculate averAGE fact counts over Agegroups 
--   THIS IS EXTREMELY SLOW ON LARGE DATA SO IS DISABLED PE.3 - Uncomment here if you want to run it, and also uncomment the reference to AVERAGE_FACT_COUNT below
-- SET @STEP_TS = GETDATE()
-- 
-- SELECT COHORT_NAME, CUTOFF_FILTER_YN, AGE_GRP, AVG_FACT_COUNT
-- INTO #AGE_GRP_AFC
-- FROM
-- (
-- SELECT COHORT_NAME, CAST('N' AS CHAR(1)) AS CUTOFF_FILTER_YN, CAG.AGE_GRP, 1.0*COUNT(O.CONCEPT_CD)/COUNT(DISTINCT CAG.PATIENT_NUM) as AVG_FACT_COUNT
-- FROM #COHORT_AGE_GRP CAG
--   JOIN DBO.OBSERVATION_FACT O
--     ON CAG.PATIENT_NUM = O.PATIENT_NUM
-- WHERE CONVERT(DATE,O.START_DATE) BETWEEN DATEADD(YY,-@LOOKBACK_YEARS,INDEX_DT) AND INDEX_DT
-- GROUP BY COHORT_NAME, CAG.AGE_GRP
-- UNION ALL
-- SELECT CAG.COHORT_NAME, CAST('Y' AS CHAR(1)) AS CUTOFF_FILTER_YN, CAG.AGE_GRP, 1.0*COUNT(O.CONCEPT_CD)/COUNT(DISTINCT CAG.PATIENT_NUM) as AVG_FACT_COUNT
-- FROM #COHORT_AGE_GRP CAG
--   JOIN #AGE_GRP_PSC PSC
--     ON CAG.AGE_GRP = PSC.AGE_GRP
--       AND CAG.PREDICTED_SCORE >= PSC.PREDICTIVE_SCORE_CUTOFF
--       AND CAG.COHORT_NAME = PSC.COHORT_NAME
--   JOIN DBO.OBSERVATION_FACT O
--     ON CAG.PATIENT_NUM = O.PATIENT_NUM
-- WHERE O.START_DATE >= CONVERT(DATETIME,DATEADD(YY,-@LOOKBACK_YEARS,CAG.INDEX_DT)) AND O.START_DATE < CONVERT(DATETIME,DATEADD(DD,1,CAG.INDEX_DT))  --ALTERED OCT2022 - BASE NON-DEMOGRAPHIC FACT LOOKUP ON MEASURE PERIOD 
-- GROUP BY CAG.COHORT_NAME, CAG.AGE_GRP
-- )AFC 


SELECT @ROWS=@@ROWCOUNT,@ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
RAISERROR(N'Average Fact Counts - Rows: %d - Total Execution (ms): %d  - Step Runtime (ms): %d', 1, 1, @ROWS, @ENDRUNTIME_MS, @STEPRUNTIME_MS) with nowait;


-- OPTIONAL CHARLSON COMORBIDITY INDEX -- ADDS APPROX. 1m in UKY environment. 
--    REQUIRES SITE TO LOAD DT_LOYALTY_CHARLSON FROM REPO 
SET @STEP_TS = GETDATE()

SELECT DISTINCT CHARLSON_CATGRY, CHARLSON_WT, C_BASECODE AS CONCEPT_CD
INTO #CHARLSON_DX
FROM (
SELECT C.CHARLSON_CATGRY, C.CHARLSON_WT, DX10.C_BASECODE
FROM DBO.DT_LOYALTY_CHARLSON C
  JOIN DBO.ACT_ICD10CM_DX_V41 DX10
    ON DX10.C_BASECODE LIKE C.DIAGPATTERN
    AND DX10.C_BASECODE NOT LIKE '%-%' -- FILTER OUT RANGE CONCEPT CODES FROM ONTOLOGY IE ICD10CM:I70-I79.99 
UNION ALL
SELECT C.CHARLSON_CATGRY, C.CHARLSON_WT, DX9.C_BASECODE
FROM DBO.DT_LOYALTY_CHARLSON C
  JOIN DBO.ACT_ICD9CM_DX_V4 DX9
    ON DX9.C_BASECODE LIKE C.DIAGPATTERN
    AND DX9.C_BASECODE NOT LIKE '%-%' -- FILTER OUT RANGE CONCEPT CODES FROM ONTOLOGY 
)C

;WITH CTE_VISIT_BASE AS (
SELECT COHORT_NAME, PATIENT_NUM, SEX, AGE, LAST_VISIT
  , CASE  WHEN AGE < 50 THEN 0
          WHEN AGE BETWEEN 50 AND 59 THEN 1
          WHEN AGE BETWEEN 60 AND 69 THEN 2
          WHEN AGE >= 70 THEN 3 END AS CHARLSON_AGE_BASE
FROM (
SELECT COHORT_NAME, V.PATIENT_NUM
  , SEX
  , V.AGE
  , LAST_VISIT
FROM #COHORT V 
) VISITS
)
SELECT COHORT_NAME, PATIENT_NUM, SEX, AGE, LAST_VISIT, CHARLSON_AGE_BASE
INTO #CHARLSON_VISIT_BASE
FROM CTE_VISIT_BASE

SELECT @SITE as SITE, COHORT_NAME, PATIENT_NUM
  , LAST_VISIT
  , SEX
  , AGE
  , CAST(CASE WHEN AGE < 65 THEN 'UNDER 65' 
     WHEN AGE>=65           THEN 'OVER 65' ELSE '-' END AS VARCHAR(20)) AS AGE_GRP
  , CHARLSON_INDEX
  , POWER( 0.983
      , POWER(2.71828, (CASE WHEN CHARLSON_INDEX > 7 THEN 7 ELSE CHARLSON_INDEX END) * 0.9)
      ) * 100.0 AS CHARLSON_10YR_PROB
  , MI, CHF, CVD, PVD, DEMENTIA, COPD, RHEUMDIS, PEPULCER, MILDLIVDIS, DIABETES_NOCC, DIABETES_WTCC, HEMIPARAPLEG, RENALDIS, CANCER, MSVLIVDIS, METASTATIC, AIDSHIV
INTO #COHORT_CHARLSON
FROM (
SELECT COHORT_NAME, PATIENT_NUM, LAST_VISIT, SEX, AGE
  , CHARLSON_AGE_BASE
      + MI + CHF + CVD + PVD + DEMENTIA + COPD + RHEUMDIS + PEPULCER 
      + (CASE WHEN MSVLIVDIS > 0 THEN 0 ELSE MILDLIVDIS END)
      + (CASE WHEN DIABETES_WTCC > 0 THEN 0 ELSE DIABETES_NOCC END)
      + DIABETES_WTCC + HEMIPARAPLEG + RENALDIS + CANCER + MSVLIVDIS + METASTATIC + AIDSHIV AS CHARLSON_INDEX
  , MI, CHF, CVD, PVD, DEMENTIA, COPD, RHEUMDIS, PEPULCER, MILDLIVDIS, DIABETES_NOCC, DIABETES_WTCC, HEMIPARAPLEG, RENALDIS, CANCER, MSVLIVDIS, METASTATIC, AIDSHIV
FROM (
SELECT COHORT_NAME, PATIENT_NUM, SEX, AGE, LAST_VISIT, CHARLSON_AGE_BASE
  , MAX(CASE WHEN CHARLSON_CATGRY = 'MI'            THEN CHARLSON_WT ELSE 0 END) AS MI
  , MAX(CASE WHEN CHARLSON_CATGRY = 'CHF'           THEN CHARLSON_WT ELSE 0 END) AS CHF
  , MAX(CASE WHEN CHARLSON_CATGRY = 'CVD'           THEN CHARLSON_WT ELSE 0 END) AS CVD
  , MAX(CASE WHEN CHARLSON_CATGRY = 'PVD'           THEN CHARLSON_WT ELSE 0 END) AS PVD
  , MAX(CASE WHEN CHARLSON_CATGRY = 'DEMENTIA'      THEN CHARLSON_WT ELSE 0 END) AS DEMENTIA
  , MAX(CASE WHEN CHARLSON_CATGRY = 'COPD'          THEN CHARLSON_WT ELSE 0 END) AS COPD
  , MAX(CASE WHEN CHARLSON_CATGRY = 'RHEUMDIS'      THEN CHARLSON_WT ELSE 0 END) AS RHEUMDIS
  , MAX(CASE WHEN CHARLSON_CATGRY = 'PEPULCER'      THEN CHARLSON_WT ELSE 0 END) AS PEPULCER
  , MAX(CASE WHEN CHARLSON_CATGRY = 'MILDLIVDIS'    THEN CHARLSON_WT ELSE 0 END) AS MILDLIVDIS
  , MAX(CASE WHEN CHARLSON_CATGRY = 'DIABETES_NOCC' THEN CHARLSON_WT ELSE 0 END) AS DIABETES_NOCC
  , MAX(CASE WHEN CHARLSON_CATGRY = 'DIABETES_WTCC' THEN CHARLSON_WT ELSE 0 END) AS DIABETES_WTCC
  , MAX(CASE WHEN CHARLSON_CATGRY = 'HEMIPARAPLEG'  THEN CHARLSON_WT ELSE 0 END) AS HEMIPARAPLEG
  , MAX(CASE WHEN CHARLSON_CATGRY = 'RENALDIS'      THEN CHARLSON_WT ELSE 0 END) AS RENALDIS
  , MAX(CASE WHEN CHARLSON_CATGRY = 'CANCER'        THEN CHARLSON_WT ELSE 0 END) AS CANCER
  , MAX(CASE WHEN CHARLSON_CATGRY = 'MSVLIVDIS'     THEN CHARLSON_WT ELSE 0 END) AS MSVLIVDIS
  , MAX(CASE WHEN CHARLSON_CATGRY = 'METASTATIC'    THEN CHARLSON_WT ELSE 0 END) AS METASTATIC
  , MAX(CASE WHEN CHARLSON_CATGRY = 'AIDSHIV'       THEN CHARLSON_WT ELSE 0 END) AS AIDSHIV
FROM (
  -- FOR EACH VISIT - PULL PREVIOUS YEAR OF DIAGNOSIS FACTS JOINED TO CHARLSON CATEGORIES - EXTRACTING CHARLSON CATGRY/WT 
  SELECT COHORT_NAME, O.PATIENT_NUM, O.SEX, O.AGE, O.LAST_VISIT, O.CHARLSON_AGE_BASE, C.CHARLSON_CATGRY, C.CHARLSON_WT
  FROM (SELECT DISTINCT COHORT_NAME, F.PATIENT_NUM, CONCEPT_CD, V.SEX, V.AGE, V.LAST_VISIT, V.CHARLSON_AGE_BASE 
        FROM DBO.OBSERVATION_FACT F 
          JOIN #CHARLSON_VISIT_BASE V 
            ON F.PATIENT_NUM = V.PATIENT_NUM
            AND F.START_DATE >= CONVERT(DATETIME,DATEADD(YY,-1,V.LAST_VISIT)) AND F.START_DATE < CONVERT(DATETIME,DATEADD(DD,1,V.LAST_VISIT)) -- CHARLSON IS TYPICALLY CALCULATED ON THE PREVIOUS YEAR - DEPENDING ON HOW THE COHORT IS DEFINED THIS MAY NOT EQUAL INDEX_DT 
       )O
    JOIN #CHARLSON_DX C
      ON O.CONCEPT_CD = C.CONCEPT_CD
  GROUP BY COHORT_NAME, O.PATIENT_NUM, O.SEX, O.AGE, O.LAST_VISIT, O.CHARLSON_AGE_BASE, C.CHARLSON_CATGRY, C.CHARLSON_WT
  UNION -- IF NO CHARLSON DX FOUND IN ABOVE INNER JOINS WE CAN UNION TO JUST THE ENCOUNTER+AGE_BASE RECORD WITH CHARLSON FIELDS NULLED OUT
--            THIS IS MORE PERFORMANT (SHORTCUT) THAN A LEFT JOIN IN THE OBSERVATION-CHARLSON JOIN ABOVE 
  SELECT COHORT_NAME, V2.PATIENT_NUM, V2.SEX, V2.AGE, V2.LAST_VISIT, V2.CHARLSON_AGE_BASE, NULL, NULL
  FROM #CHARLSON_VISIT_BASE V2
  )DXU
  GROUP BY COHORT_NAME, PATIENT_NUM, SEX, AGE, LAST_VISIT, CHARLSON_AGE_BASE
)cci
)ccisum

SELECT @ROWS=@@ROWCOUNT,@ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
RAISERROR(N'Charlson Index and weighted flags - Rows: %d - Total Execution (ms): %d  - Step Runtime (ms): %d', 1, 1, @ROWS, @ENDRUNTIME_MS, @STEPRUNTIME_MS) with nowait;

-- CHARLSON 10YR PROB MEDIAN/MEAN/MODE/STDEV 
SET @STEP_TS = GETDATE()

-- UNFILTERED BY PSC 
;WITH CTE_MODE AS (
SELECT COHORT_NAME, ISNULL(A.AGE_GRP,'ALL PATIENTS') AGE_GRP
  , CHARLSON_10YR_PROB
  , RANK() OVER (PARTITION BY COHORT_NAME, ISNULL(A.AGE_GRP,'ALL PATIENTS') ORDER BY N DESC) MR_AG
FROM (
SELECT COHORT_NAME, AGE_GRP, CHARLSON_10YR_PROB, COUNT(*) N
FROM #COHORT_CHARLSON
GROUP BY GROUPING SETS ((COHORT_NAME, AGE_GRP, CHARLSON_10YR_PROB),(COHORT_NAME, CHARLSON_10YR_PROB))
)A 
GROUP BY COHORT_NAME, ISNULL(A.AGE_GRP,'ALL PATIENTS'), CHARLSON_10YR_PROB, N
)
, CTE_MEAN_STDEV_MODE AS (
SELECT GS.COHORT_NAME, ISNULL(GS.AGE_GRP,'ALL PATIENTS') AGE_GRP, MEAN_10YR_PROB, STDEV_10YR_PROB
  , AVG(CHARLSON_10YR_PROB) AS MODE_10YR_PROB -- ONLY MEANINGFUL WHEN THERE IS A TIE FOR MODE 
FROM (
SELECT COHORT_NAME, AGE_GRP, AVG(CHARLSON_10YR_PROB) MEAN_10YR_PROB, STDEV(CHARLSON_10YR_PROB) STDEV_10YR_PROB
FROM #COHORT_CHARLSON
GROUP BY GROUPING SETS ((COHORT_NAME, AGE_GRP),(COHORT_NAME))
)GS JOIN CTE_MODE M
  ON GS.COHORT_NAME = M.COHORT_NAME
  AND ISNULL(GS.AGE_GRP,'ALL PATIENTS') = M.AGE_GRP
  AND M.MR_AG = 1
GROUP BY GS.COHORT_NAME, ISNULL(GS.AGE_GRP,'ALL PATIENTS'), MEAN_10YR_PROB, STDEV_10YR_PROB
)
SELECT MS.COHORT_NAME, MS.AGE_GRP
  , CAST('N' AS CHAR(1)) CUTOFF_FILTER_YN
  , MEDIAN_10YR_PROB
  , S.MEAN_10YR_PROB
  , S.STDEV_10YR_PROB
  , S.MODE_10YR_PROB
INTO #CHARLSON_STATS
FROM (
SELECT COHORT_NAME, AGE_GRP, CHARLSON_10YR_PROB
  , PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CHARLSON_10YR_PROB) OVER (PARTITION BY COHORT_NAME, AGE_GRP) AS MEDIAN_10YR_PROB
FROM #COHORT_CHARLSON
WHERE AGE_GRP != '-'
UNION ALL
SELECT COHORT_NAME, 'ALL PATIENTS' as AGE_GRP, CHARLSON_10YR_PROB
  , PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CHARLSON_10YR_PROB) OVER (PARTITION BY COHORT_NAME) AS MEDIAN_10YR_PROB
FROM #COHORT_CHARLSON
WHERE AGE_GRP != '-'
)MS JOIN CTE_MEAN_STDEV_MODE S
  ON MS.AGE_GRP = S.AGE_GRP
  AND MS.COHORT_NAME = S.COHORT_NAME
GROUP BY MS.COHORT_NAME, MS.AGE_GRP, MEDIAN_10YR_PROB, S.MODE_10YR_PROB, S.STDEV_10YR_PROB, S.MEAN_10YR_PROB

 
-- FILTERED BY PSC 
;WITH CTE_MODE AS (
SELECT COHORT_NAME
  , AGE_GRP
  , CHARLSON_10YR_PROB
  , RANK() OVER (PARTITION BY COHORT_NAME, ISNULL(A.AGE_GRP,'ALL PATIENTS') ORDER BY N DESC) MR_AG
FROM (
SELECT CC.COHORT_NAME, C.AGE_GRP, CHARLSON_10YR_PROB, COUNT(*) N
FROM #COHORT_CHARLSON CC
  JOIN #COHORT_AGE_GRP C
    ON CC.PATIENT_NUM = C.PATIENT_NUM
    AND CC.COHORT_NAME = C.COHORT_NAME
  JOIN #AGE_GRP_PSC PSC
    ON C.AGE_GRP = PSC.AGE_GRP
    AND C.PREDICTED_SCORE >= PSC.PREDICTIVE_SCORE_CUTOFF
    AND C.COHORT_NAME = PSC.COHORT_NAME
GROUP BY CC.COHORT_NAME, C.AGE_GRP,CHARLSON_10YR_PROB
)A
GROUP BY COHORT_NAME, AGE_GRP, CHARLSON_10YR_PROB, N
)
, CTE_MEAN_STDEV_MODE AS (
SELECT GS.COHORT_NAME, ISNULL(GS.AGE_GRP,'ALL PATIENTS') AS AGE_GRP, MEAN_10YR_PROB, STDEV_10YR_PROB
  , AVG(CHARLSON_10YR_PROB) AS MODE_10YR_PROB
FROM (
SELECT CC.COHORT_NAME, C.AGE_GRP, AVG(CHARLSON_10YR_PROB) MEAN_10YR_PROB, STDEV(CHARLSON_10YR_PROB) STDEV_10YR_PROB
FROM #COHORT_CHARLSON CC
  JOIN #COHORT_AGE_GRP C
    ON CC.PATIENT_NUM = C.PATIENT_NUM
    AND CC.COHORT_NAME = C.COHORT_NAME
  JOIN #AGE_GRP_PSC PSC
    ON C.AGE_GRP = PSC.AGE_GRP
    AND C.PREDICTED_SCORE >= PSC.PREDICTIVE_SCORE_CUTOFF
    AND C.COHORT_NAME = C.COHORT_NAME
GROUP BY CC.COHORT_NAME, C.AGE_GRP
)GS JOIN CTE_MODE M
  ON GS.COHORT_NAME = M.COHORT_NAME
  AND ISNULL(GS.AGE_GRP,'ALL PATIENTS') = M.AGE_GRP
  AND M.MR_AG = 1
GROUP BY GS.COHORT_NAME, ISNULL(GS.AGE_GRP,'ALL PATIENTS'), MEAN_10YR_PROB, STDEV_10YR_PROB
)
INSERT INTO #CHARLSON_STATS(COHORT_NAME, AGE_GRP,CUTOFF_FILTER_YN,MEDIAN_10YR_PROB,MEAN_10YR_PROB,STDEV_10YR_PROB,MODE_10YR_PROB)
SELECT MS.COHORT_NAME, MS.AGE_GRP
  , CAST('Y' AS CHAR(1)) AS CUTOFF_FILTER_YN
  , MEDIAN_10YR_PROB
  , S.MEAN_10YR_PROB
  , S.STDEV_10YR_PROB
  , S.MODE_10YR_PROB
FROM (
SELECT CC.COHORT_NAME, C.AGE_GRP, CHARLSON_10YR_PROB
  , PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CHARLSON_10YR_PROB) OVER (PARTITION BY CC.COHORT_NAME, C.AGE_GRP) AS MEDIAN_10YR_PROB
FROM #COHORT_CHARLSON CC
  JOIN #COHORT_AGE_GRP C
    ON CC.PATIENT_NUM = C.PATIENT_NUM
      AND CC.COHORT_NAME = C.COHORT_NAME
  JOIN #AGE_GRP_PSC PSC
    ON C.AGE_GRP = PSC.AGE_GRP
    AND C.PREDICTED_SCORE >= PSC.PREDICTIVE_SCORE_CUTOFF
    AND CC.COHORT_NAME = PSC.COHORT_NAME
WHERE CC.AGE_GRP != '-'
)MS JOIN CTE_MEAN_STDEV_MODE S
  ON MS.AGE_GRP = S.AGE_GRP
  AND MS.COHORT_NAME = S.COHORT_NAME
GROUP BY MS.COHORT_NAME, MS.AGE_GRP, MEDIAN_10YR_PROB, S.MODE_10YR_PROB, S.STDEV_10YR_PROB, S.MEAN_10YR_PROB


SELECT @ROWS=@@ROWCOUNT,@ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
RAISERROR(N'Charlson Stats - Rows: %d - Total Execution (ms): %d  - Step Runtime (ms): %d', 1, 1, @ROWS, @ENDRUNTIME_MS, @STEPRUNTIME_MS) with nowait;

-- FINAL SUMMARIZATION OF RESULTS 
-- clear out last run of lookback 
DELETE FROM DBO.DT_LOYALTY_RESULT_SUMMARY 
WHERE LOOKBACK_YR = @LOOKBACK_YEARS
  AND GENDER_DENOMINATORS_YN = IIF(@GENDERED=0,'N','Y')
  AND SITE=@SITE
  AND COHORT_NAME IN (SELECT COHORT_NAME FROM @COHORT_FILTER)


-- FINAL SUMMARIZATION OF RESULTS 
SET @STEP_TS = GETDATE()

INSERT INTO DBO.DT_LOYALTY_RESULT_SUMMARY (COHORT_NAME, SITE, LOOKBACK_YR, GENDER_DENOMINATORS_YN, CUTOFF_FILTER_YN, SUMMARY_DESCRIPTION, TABLE_NAME, NUM_DX1, NUM_DX2, MED_USE1, MED_USE2
, MAMMOGRAPHY, PAP_TEST, PSA_TEST, COLONOSCOPY, FECAL_OCCULT_TEST, FLU_SHOT, PNEUMOCOCCAL_VACCINE, BMI, A1C, MEDICAL_EXAM, INP1_OPT1_VISIT, OPT2_VISIT, ED_VISIT
, MDVISIT_PNAME2, MDVISIT_PNAME3, ROUTINE_CARE_2, SUBJECTS_NOCRITERIA, PREDICTIVE_SCORE_CUTOFF
, MEAN_10YR_PROB, MEDIAN_10YR_PROB, MODE_10YR_PROB, STDEV_10YR_PROB, TOTAL_SUBJECTS
, TOTAL_SUBJECTS_FEMALE, TOTAL_SUBJECTS_MALE, PERCENT_SUBJECTS_FEMALE, PERCENT_SUBJECTS_MALE, AVERAGE_FACT_COUNT)
SELECT DISTINCT COHORTAGG.COHORT_NAME, @SITE, @LOOKBACK_YEARS, IIF(@GENDERED=0,'N','Y') as GENDER_DENOMINATORS_YN, COHORTAGG.CUTOFF_FILTER_YN, SUMMARY_DESCRIPTION, COHORTAGG.AGE_GRP as TABLE_NAME, NUM_DX1, NUM_DX2, MED_USE1, MED_USE2
  , MAMMOGRAPHY, PAP_TEST, PSA_TEST, COLONOSCOPY, FECAL_OCCULT_TEST, FLU_SHOT, PNEUMOCOCCAL_VACCINE, BMI, A1C, MEDICAL_EXAM, INP1_OPT1_VISIT, OPT2_VISIT, ED_VISIT
  , MDVISIT_PNAME2, MDVISIT_PNAME3, Routine_care_2, SUBJECTS_NOCRITERIA
  , CASE WHEN COHORTAGG.CUTOFF_FILTER_YN = 'Y' THEN CP.PREDICTIVE_SCORE_CUTOFF ELSE NULL END AS PREDICTIVE_SCORE_CUTOFF
  , CS.MEAN_10YR_PROB, CS.MEDIAN_10YR_PROB, CS.MODE_10YR_PROB, CS.STDEV_10YR_PROB
  , TOTAL_SUBJECTS
  , TOTAL_SUBJECTS_FEMALE
  , TOTAL_SUBJECTS_MALE
  , PERCENT_SUBJECTS_FEMALE
  , PERCENT_SUBJECTS_MALE
  , 0 --FC.AVG_FACT_COUNT as AVERAGE_FACT_COUNT
FROM (
-- FILTERED BY PREDICTIVE CUTOFF 
SELECT CAG.COHORT_NAME, 
'Y' AS CUTOFF_FILTER_YN,
'PATIENT COUNTS' as SUMMARY_DESCRIPTION,
CAG.AGE_GRP, 
COUNT(PATIENT_NUM) AS TOTAL_SUBJECTS,
SUM(CAST(NUM_DX1 AS INT)) AS NUM_DX1,
SUM(CAST(NUM_DX2 AS INT)) AS NUM_DX2,
SUM(CAST(MED_USE1 AS INT))  AS MED_USE1,
SUM(CAST(MED_USE2 AS INT)) AS MED_USE2,
SUM(CAST(IIF(@GENDERED=0,MAMMOGRAPHY,IIF(SEX='F',MAMMOGRAPHY,NULL)) AS INT)) AS MAMMOGRAPHY,
SUM(CAST(IIF(@GENDERED=0,PAP_TEST    ,IIF(SEX='F',PAP_TEST    ,NULL)) AS INT)) AS PAP_TEST,
SUM(CAST(IIF(@GENDERED=0,PSA_TEST    ,IIF(SEX='M',PSA_TEST    ,NULL)) AS INT)) AS PSA_TEST,
SUM(CAST(COLONOSCOPY AS INT)) AS COLONOSCOPY,
SUM(CAST(FECAL_OCCULT_TEST AS INT)) AS FECAL_OCCULT_TEST,
SUM(CAST(FLU_SHOT AS INT)) AS  FLU_SHOT,
SUM(CAST(PNEUMOCOCCAL_VACCINE AS INT)) AS PNEUMOCOCCAL_VACCINE,
SUM(CAST(BMI AS INT))  AS BMI,
SUM(CAST(A1C AS INT)) AS A1C,
SUM(CAST(MEDICAL_EXAM AS INT)) AS MEDICAL_EXAM,
SUM(CAST(INP1_OPT1_VISIT AS INT)) AS INP1_OPT1_VISIT,
SUM(CAST(OPT2_VISIT AS INT)) AS OPT2_VISIT,
SUM(CAST(ED_VISIT AS INT))  AS ED_VISIT,
SUM(CAST(MDVISIT_PNAME2 AS INT)) AS MDVISIT_PNAME2,
SUM(CAST(MDVISIT_PNAME3 AS INT)) AS MDVISIT_PNAME3,
SUM(CAST(ROUTINE_CARE_2 AS INT)) AS ROUTINE_CARE_2,
SUM(CAST(~(NUM_DX1|NUM_DX2|MED_USE1|MAMMOGRAPHY|PAP_TEST|PSA_TEST|COLONOSCOPY|FECAL_OCCULT_TEST|FLU_SHOT|PNEUMOCOCCAL_VACCINE|BMI|
  A1C|MEDICAL_EXAM|INP1_OPT1_VISIT|OPT2_VISIT|ED_VISIT|MDVISIT_PNAME2|MDVISIT_PNAME3|ROUTINE_CARE_2) AS INT)) as SUBJECTS_NOCRITERIA, -- inverted bitwise OR of all bit flags 
SUM(IIF(SEX='F',1.0,0.0)) AS TOTAL_SUBJECTS_FEMALE,
SUM(IIF(SEX='M',1.0,0.0)) AS TOTAL_SUBJECTS_MALE,
NULL AS PERCENT_SUBJECTS_FEMALE,
NULL AS PERCENT_SUBJECTS_MALE
FROM #COHORT_AGE_GRP CAG JOIN #AGE_GRP_PSC P 
  ON CAG.AGE_GRP = P.AGE_GRP 
  AND CAG.PREDICTED_SCORE >= P.PREDICTIVE_SCORE_CUTOFF
  AND CAG.COHORT_NAME = P.COHORT_NAME
GROUP BY CAG.COHORT_NAME, CAG.AGE_GRP
UNION ALL
SELECT CAG.COHORT_NAME, 
'Y' AS CUTOFF_FILTER_YN,
'PERCENT SUBJECTS' as SUMMARY_DESCRIPTION,
CAG.AGE_GRP, 
COUNT(PATIENT_NUM) as TOTAL_SUBJECTS,
100*AVG(CAST(NUM_DX1 as NUMERIC(2,1))) as NUM_DX1,
100*AVG(CAST(NUM_DX2 as NUMERIC(2,1))) as NUM_DX2,
100*AVG(CAST(MED_USE1 as NUMERIC(2,1)))  as MED_USE1,
100*AVG(CAST(MED_USE2 as NUMERIC(2,1))) as MED_USE2,
100*AVG(CAST(IIF(@GENDERED=0,MAMMOGRAPHY,IIF(SEX='F',MAMMOGRAPHY,NULL)) AS NUMERIC(2,1))) as MAMMOGRAPHY,
100*AVG(CAST(IIF(@GENDERED=0,PAP_TEST    ,IIF(SEX='F',PAP_TEST    ,NULL)) AS NUMERIC(2,1))) as PAP_TEST,
100*AVG(CAST(IIF(@GENDERED=0,PSA_TEST    ,IIF(SEX='M',PSA_TEST    ,NULL)) AS NUMERIC(2,1))) as PSA_TEST,
100*AVG(CAST(COLONOSCOPY as NUMERIC(2,1))) as COLONOSCOPY,
100*AVG(CAST(FECAL_OCCULT_TEST as NUMERIC(2,1))) as FECAL_OCCULT_TEST,
100*AVG(CAST(FLU_SHOT as NUMERIC(2,1))) as  FLU_SHOT,
100*AVG(CAST(PNEUMOCOCCAL_VACCINE as NUMERIC(2,1))) as PNEUMOCOCCAL_VACCINE,
100*AVG(CAST(BMI as NUMERIC(2,1)))  as BMI,
100*AVG(CAST(A1C as NUMERIC(2,1))) as A1C,
100*AVG(CAST(MEDICAL_EXAM as NUMERIC(2,1))) as MEDICAL_EXAM,
100*AVG(CAST(INP1_OPT1_VISIT as NUMERIC(2,1))) as INP1_OPT1_VISIT,
100*AVG(CAST(OPT2_VISIT as NUMERIC(2,1))) as OPT2_VISIT,
100*AVG(CAST(ED_VISIT as NUMERIC(2,1)))  as ED_VISIT,
100*AVG(CAST(MDVISIT_PNAME2 as NUMERIC(2,1))) as MDVISIT_PNAME2,
100*AVG(CAST(MDVISIT_PNAME3 as NUMERIC(2,1))) as MDVISIT_PNAME3,
100*AVG(CAST(ROUTINE_CARE_2 as NUMERIC(2,1))) as Routine_care_2,
100*AVG(CAST(~(NUM_DX1|NUM_DX2|MED_USE1|MAMMOGRAPHY|PAP_TEST|PSA_TEST|COLONOSCOPY|FECAL_OCCULT_TEST|FLU_SHOT|PNEUMOCOCCAL_VACCINE|BMI|
  A1C|MEDICAL_EXAM|INP1_OPT1_VISIT|OPT2_VISIT|ED_VISIT|MDVISIT_PNAME2|MDVISIT_PNAME3|ROUTINE_CARE_2) AS NUMERIC(2,1))) as SUBJECTS_NOCRITERIA, -- inverted bitwise OR of all bit flags 
NULL AS TOTAL_SUBJECTS_FEMALE,
NULL AS TOTAL_SUBJECTS_MALE,
100*AVG(IIF(SEX='F',1.0,0.0)) AS PERCENT_SUBJECTS_FEMALE,
100*AVG(IIF(SEX='M',1.0,0.0)) AS PERCENT_SUBJECTS_MALE
FROM #COHORT_AGE_GRP CAG JOIN #AGE_GRP_PSC P 
  ON CAG.AGE_GRP = P.AGE_GRP 
  AND CAG.PREDICTED_SCORE >= P.PREDICTIVE_SCORE_CUTOFF
  AND CAG.COHORT_NAME = P.COHORT_NAME
GROUP BY CAG.COHORT_NAME, CAG.AGE_GRP
UNION ALL
-- UNFILTERED -- ALL QUINTILES 
SELECT CAG.COHORT_NAME, 
'N' AS CUTOFF_FILTER_YN,
'PATIENT COUNTS' as SUMMARY_DESCRIPTION,
CAG.AGE_GRP, 
COUNT(PATIENT_NUM) as TOTAL_SUBJECTS,
SUM(CAST(NUM_DX1 as int)) as NUM_DX1,
SUM(CAST(NUM_DX2 as int)) as NUM_DX2,
SUM(CAST(MED_USE1 as int))  as MED_USE1,
SUM(CAST(MED_USE2 as int)) as MED_USE2,
SUM(CAST(IIF(@GENDERED=0,MAMMOGRAPHY,IIF(SEX='F',MAMMOGRAPHY,NULL)) as int)) as MAMMOGRAPHY,
SUM(CAST(IIF(@GENDERED=0,PAP_TEST    ,IIF(SEX='F',PAP_TEST    ,NULL)) as int)) as PAP_TEST,
SUM(CAST(IIF(@GENDERED=0,PSA_TEST    ,IIF(SEX='M',PSA_TEST    ,NULL)) as int)) as PSA_TEST,
SUM(CAST(COLONOSCOPY as int)) as COLONOSCOPY,
SUM(CAST(FECAL_OCCULT_TEST as int)) as FECAL_OCCULT_TEST,
SUM(CAST(FLU_SHOT as int)) as  FLU_SHOT,
SUM(CAST(PNEUMOCOCCAL_VACCINE as int)) as PNEUMOCOCCAL_VACCINE,
SUM(CAST(BMI as int))  as BMI,
SUM(CAST(A1C as int)) as A1C,
SUM(CAST(MEDICAL_EXAM as int)) as MEDICAL_EXAM,
SUM(CAST(INP1_OPT1_VISIT as int)) as INP1_OPT1_VISIT,
SUM(CAST(OPT2_VISIT as int)) as OPT2_VISIT,
SUM(CAST(ED_VISIT as int))  as ED_VISIT,
SUM(CAST(MDVISIT_PNAME2 as int)) as MDVISIT_PNAME2,
SUM(CAST(MDVISIT_PNAME3 as int)) as MDVISIT_PNAME3,
SUM(CAST(ROUTINE_CARE_2 as int)) as Routine_care_2,
SUM(CAST(~(NUM_DX1|NUM_DX2|MED_USE1|MAMMOGRAPHY|PAP_TEST|PSA_TEST|COLONOSCOPY|FECAL_OCCULT_TEST|FLU_SHOT|PNEUMOCOCCAL_VACCINE|BMI|
  A1C|MEDICAL_EXAM|INP1_OPT1_VISIT|OPT2_VISIT|ED_VISIT|MDVISIT_PNAME2|MDVISIT_PNAME3|ROUTINE_CARE_2) AS INT)) as SUBJECTS_NOCRITERIA, -- inverted bitwise OR of all bit flags 
SUM(IIF(SEX='F',1.0,0.0)) AS TOTAL_SUBJECTS_FEMALE,
SUM(IIF(SEX='M',1.0,0.0)) AS TOTAL_SUBJECTS_MALE,
NULL AS PERCENT_SUBJECTS_FEMALE,
NULL AS PERCENT_SUBJECTS_MALE
FROM #COHORT_AGE_GRP CAG
GROUP BY CAG.COHORT_NAME, CAG.AGE_GRP
UNION ALL
SELECT CAG.COHORT_NAME, 
'N' AS PREDICTIVE_CUTOFF_FILTER_YN,
'PERCENT SUBJECTS' as SUMMARY_DESCRIPTION,
CAG.AGE_GRP, 
COUNT(PATIENT_NUM) as TOTAL_SUBJECTS,
100*AVG(CAST(NUM_DX1 as NUMERIC(2,1))) as NUM_DX1,
100*AVG(CAST(NUM_DX2 as NUMERIC(2,1))) as NUM_DX2,
100*AVG(CAST(MED_USE1 as NUMERIC(2,1)))  as MED_USE1,
100*AVG(CAST(MED_USE2 as NUMERIC(2,1))) as MED_USE2,
100*AVG(CAST(IIF(@GENDERED=0,MAMMOGRAPHY,IIF(SEX='F',MAMMOGRAPHY,NULL)) AS NUMERIC(2,1))) as MAMMOGRAPHY,
100*AVG(CAST(IIF(@GENDERED=0,PAP_TEST    ,IIF(SEX='F',PAP_TEST    ,NULL)) AS NUMERIC(2,1))) as PAP_TEST,
100*AVG(CAST(IIF(@GENDERED=0,PSA_TEST    ,IIF(SEX='M',PSA_TEST    ,NULL)) AS NUMERIC(2,1))) as PSA_TEST,
100*AVG(CAST(COLONOSCOPY as NUMERIC(2,1))) as COLONOSCOPY,
100*AVG(CAST(FECAL_OCCULT_TEST as NUMERIC(2,1))) as FECAL_OCCULT_TEST,
100*AVG(CAST(FLU_SHOT as NUMERIC(2,1))) as  FLU_SHOT,
100*AVG(CAST(PNEUMOCOCCAL_VACCINE as NUMERIC(2,1))) as PNEUMOCOCCAL_VACCINE,
100*AVG(CAST(BMI as NUMERIC(2,1)))  as BMI,
100*AVG(CAST(A1C as NUMERIC(2,1))) as A1C,
100*AVG(CAST(MEDICAL_EXAM as NUMERIC(2,1))) as MEDICAL_EXAM,
100*AVG(CAST(INP1_OPT1_VISIT as NUMERIC(2,1))) as INP1_OPT1_VISIT,
100*AVG(CAST(OPT2_VISIT as NUMERIC(2,1))) as OPT2_VISIT,
100*AVG(CAST(ED_VISIT as NUMERIC(2,1))) as ED_VISIT,
100*AVG(CAST(MDVISIT_PNAME2 as NUMERIC(2,1))) as MDVISIT_PNAME2,
100*AVG(CAST(MDVISIT_PNAME3 as NUMERIC(2,1))) as MDVISIT_PNAME3,
100*AVG(CAST(ROUTINE_CARE_2 as NUMERIC(2,1))) as Routine_care_2,
100*AVG(CAST(~(NUM_DX1|NUM_DX2|MED_USE1|MAMMOGRAPHY|PAP_TEST|PSA_TEST|COLONOSCOPY|FECAL_OCCULT_TEST|FLU_SHOT|PNEUMOCOCCAL_VACCINE|BMI|
  A1C|MEDICAL_EXAM|INP1_OPT1_VISIT|OPT2_VISIT|ED_VISIT|MDVISIT_PNAME2|MDVISIT_PNAME3|ROUTINE_CARE_2) AS NUMERIC(2,1))) as SUBJECTS_NOCRITERIA, -- inverted bitwise OR of all bit flags 
NULL AS TOTAL_SUBJECTS_FEMALE,
NULL AS TOTAL_SUBJECTS_MALE,
100*AVG(IIF(SEX='F',1.0,0.0)) AS PERCENT_SUBJECTS_FEMALE,
100*AVG(IIF(SEX='M',1.0,0.0)) AS PERCENT_SUBJECTS_MALE
FROM #COHORT_AGE_GRP CAG
GROUP BY CAG.COHORT_NAME, CAG.AGE_GRP 
)COHORTAGG
  JOIN #AGE_GRP_PSC CP
    ON COHORTAGG.AGE_GRP = CP.AGE_GRP
    AND COHORTAGG.COHORT_NAME = CP.COHORT_NAME
  JOIN #CHARLSON_STATS CS
    ON COHORTAGG.AGE_GRP = CS.AGE_GRP
      AND COHORTAGG.CUTOFF_FILTER_YN = CS.CUTOFF_FILTER_YN
      AND COHORTAGG.COHORT_NAME = CS.COHORT_NAME
--   JOIN #AGE_GRP_AFC FC
--     ON COHORTAGG.AGE_GRP = FC.AGE_GRP
--       AND COHORTAGG.CUTOFF_FILTER_YN = FC.CUTOFF_FILTER_YN
--       AND COHORTAGG.COHORT_NAME = FC.COHORT_NAME 

SELECT @ROWS=@@ROWCOUNT,@ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
RAISERROR(N'Final Summary Table - Rows: %d - Total Execution (ms): %d - Step Runtime (ms): %d', 1, 1, @ROWS, @ENDRUNTIME_MS, @STEPRUNTIME_MS) with nowait;

-- Populate slice PERCENT_POPULATION 
;WITH PERC_POPULATION AS (
SELECT LDS.COHORT_NAME, LDS.LOOKBACK_YR, LDS.GENDER_DENOMINATORS_YN, LDS.CUTOFF_FILTER_YN, LDS.TABLE_NAME
  ,  100*(CASE WHEN TABLE_NAME = 'ALL PATIENTS' THEN 1.0
      WHEN TABLE_NAME = 'OVER 65'
        THEN 1.0*TOTAL_SUBJECTS/LAG(TOTAL_SUBJECTS,1,NULL) OVER (ORDER BY LDS.COHORT_NAME, LDS.LOOKBACK_YR, LDS.GENDER_DENOMINATORS_YN, LDS.CUTOFF_FILTER_YN, LDS.TABLE_NAME)
      WHEN TABLE_NAME = 'UNDER 65'
      THEN 1.0*TOTAL_SUBJECTS/LAG(TOTAL_SUBJECTS,2,NULL) OVER (ORDER BY LDS.COHORT_NAME, LDS.LOOKBACK_YR, LDS.GENDER_DENOMINATORS_YN, LDS.CUTOFF_FILTER_YN, LDS.TABLE_NAME)
      END
    ) as PercPopulation
FROM DBO.DT_LOYALTY_RESULT_SUMMARY LDS
WHERE SUMMARY_DESCRIPTION = 'PERCENT SUBJECTS' 
  AND LDS.LOOKBACK_YR = @LOOKBACK_YEARS
  AND LDS.GENDER_DENOMINATORS_YN =  IIF(@GENDERED=0,'N','Y')
  AND LDS.SITE = @SITE
  AND LDS.COHORT_NAME IN (SELECT COHORT_NAME FROM #COHORT_FILTER)
)
UPDATE DBO.DT_LOYALTY_RESULT_SUMMARY
SET PERCENT_POPULATION = P.PercPopulation
FROM DBO.DT_LOYALTY_RESULT_SUMMARY LDS JOIN PERC_POPULATION P
  ON LDS.SUMMARY_DESCRIPTION = 'PERCENT SUBJECTS'
  AND LDS.LOOKBACK_YR = P.LOOKBACK_YR
  AND LDS.GENDER_DENOMINATORS_YN = P.GENDER_DENOMINATORS_YN
  AND LDS.CUTOFF_FILTER_YN = P.CUTOFF_FILTER_YN
  AND LDS.COHORT_NAME = P.COHORT_NAME
  AND LDS.TABLE_NAME = P.TABLE_NAME

-- AFTER PERCENT_POPULATION is calculated the 'PERCENT SUBJECTS' records should no longer store the TOTAL_SUBJECTS value - to prevent accidental sharing of this datapoint 
UPDATE DBO.DT_LOYALTY_RESULT_SUMMARY
SET TOTAL_SUBJECTS = NULL
WHERE SUMMARY_DESCRIPTION = 'PERCENT SUBJECTS' 
  AND LOOKBACK_YR = @LOOKBACK_YEARS
  AND GENDER_DENOMINATORS_YN =  IIF(@GENDERED=0,'N','Y')
  AND SITE = @SITE
  AND COHORT_NAME IN (SELECT COHORT_NAME FROM #COHORT_FILTER)

-- CALCULATE THE SLICE RUNTIME AND ADD IT TO THE SUMMARY TABLE 
UPDATE DBO.DT_LOYALTY_RESULT_SUMMARY
SET RUNTIME_MS = @ENDRUNTIME_MS
FROM DBO.DT_LOYALTY_RESULT_SUMMARY LDS
  JOIN #COHORT_FILTER CF
    ON LDS.COHORT_NAME = CF.COHORT_NAME
    AND LDS.LOOKBACK_YR = @LOOKBACK_YEARS
    AND LDS.SITE = @SITE
    AND LDS.GENDER_DENOMINATORS_YN = IIF(@GENDERED=0,'N','Y')

SET @STEP_TS = GETDATE()

-- jgk 8/4/21: Expose the cohort tables for analytics. Keep in mind it is fairly large. 
--IF OBJECT_ID(N'DBO.DT_LOYALTY_RESULT', N'U') IS NOT NULL DROP TABLE DBO.DT_LOYALTY_RESULT; -- previous versions wiped this table out each run - convert to slicewise delete 

DELETE FROM DBO.DT_LOYALTY_RESULT
WHERE LOOKBACK_YEARS = @LOOKBACK_YEARS
  AND GENDER_DENOMINATORS_YN = IIF(@GENDERED=0,'N','Y')
  AND SITE=@SITE
  AND COHORT_NAME IN (SELECT COHORT_NAME FROM #COHORT_FILTER)

INSERT INTO DBO.DT_LOYALTY_RESULT (LOOKBACK_YEARS, GENDER_DENOMINATORS_YN, SITE, COHORT_NAME, PATIENT_NUM, DEATH_DT, INDEX_DT, SEX, AGE, AGE_GRP, NUM_DX1, NUM_DX2, MED_USE1, MED_USE2, MAMMOGRAPHY, PAP_TEST, PSA_TEST, COLONOSCOPY, FECAL_OCCULT_TEST, FLU_SHOT, PNEUMOCOCCAL_VACCINE, BMI, A1C, MEDICAL_EXAM, INP1_OPT1_VISIT, OPT2_VISIT, ED_VISIT, MDVISIT_PNAME2, MDVISIT_PNAME3, ROUTINE_CARE_2, PREDICTED_SCORE)
select @LOOKBACK_YEARS as LOOKBACK_YEARS, IIF(@GENDERED=0,'N','Y') AS GENDER_DENOMINATORS_YN,  SITE, COHORT_NAME, PATIENT_NUM, DEATH_DT, INDEX_DT, SEX, AGE, AGE_GRP, NUM_DX1, NUM_DX2, MED_USE1, MED_USE2, MAMMOGRAPHY, PAP_TEST, PSA_TEST, COLONOSCOPY, FECAL_OCCULT_TEST, FLU_SHOT, PNEUMOCOCCAL_VACCINE, BMI, A1C, MEDICAL_EXAM, INP1_OPT1_VISIT, OPT2_VISIT, ED_VISIT, MDVISIT_PNAME2, MDVISIT_PNAME3, ROUTINE_CARE_2, PREDICTED_SCORE
FROM #COHORT_AGE_GRP C
WHERE AGE_GRP != 'ALL PATIENTS'; -- DROP OUT THE ALL PATIENTS DUPLICATES PRESENT IN AGE_GRP PARTITIONS 

--IF OBJECT_ID(N'DBO.DT_LOYALTY_RESULT_CHARLSON', N'U') IS NOT NULL DROP TABLE DBO.DT_LOYALTY_RESULT_CHARLSON; -- previous versions wiped this table out each run - convert to slicewise delete 

DELETE FROM DBO.DT_LOYALTY_RESULT_CHARLSON
WHERE LOOKBACK_YEARS = @LOOKBACK_YEARS
  AND GENDER_DENOMINATORS_YN = IIF(@GENDERED=0,'N','Y')
  AND SITE=@SITE
  AND COHORT_NAME IN (SELECT COHORT_NAME FROM #COHORT_FILTER)

INSERT INTO DBO.DT_LOYALTY_RESULT_CHARLSON (LOOKBACK_YEARS, GENDER_DENOMINATORS_YN,  SITE, COHORT_NAME, PATIENT_NUM, DEATH_DT, LAST_VISIT, SEX, AGE, AGE_GRP, CHARLSON_INDEX, CHARLSON_10YR_PROB, MI, CHF, CVD, PVD, DEMENTIA, COPD, RHEUMDIS, PEPULCER, MILDLIVDIS, DIABETES_NOCC, DIABETES_WTCC, HEMIPARAPLEG, RENALDIS, CANCER, MSVLIVDIS, METASTATIC, AIDSHIV)
select DISTINCT @LOOKBACK_YEARS as LOOKBACK_YEARS, IIF(@GENDERED=0,'N','Y'),  SITE, CC.COHORT_NAME, CC.PATIENT_NUM, C.DEATH_DT, CC.LAST_VISIT, CC.SEX, CC.AGE, AGE_GRP, CHARLSON_INDEX, CHARLSON_10YR_PROB, MI, CHF, CVD, PVD, DEMENTIA, COPD, RHEUMDIS, PEPULCER, MILDLIVDIS, DIABETES_NOCC, DIABETES_WTCC, HEMIPARAPLEG, RENALDIS, CANCER, MSVLIVDIS, METASTATIC, AIDSHIV 
FROM #COHORT_CHARLSON CC
  JOIN #COHORT C
    ON CC.PATIENT_NUM = C.PATIENT_NUM
WHERE AGE_GRP != 'ALL PATIENTS'; -- DROP OUT THE ALL PATIENTS DUPLICATES PRESENT IN AGE_GRP PARTITIONS 

-- FINAL TIMING MESSAGE 
SELECT @ROWS=@@ROWCOUNT,@ENDRUNTIME_MS = DATEDIFF(MILLISECOND,@START_TS,GETDATE()),@STEPRUNTIME_MS = DATEDIFF(MILLISECOND,@STEP_TS,GETDATE())
RAISERROR(N'Procedure completed - Total Execution (ms): %d', 1, 1, @ENDRUNTIME_MS) with nowait;

-- Adding a blank RAISERROR to pad between runs if using the extract full report sql 
RAISERROR(N'', 1, 1, @ENDRUNTIME_MS) with nowait;

-- FINAL OUTPUT FOR SHARED SPREADSHEET 
if(@output=1) -- Only if Output parameter was passed true - In general it's expected that the ExtractFullReport would be run to calculate several different cohorts/lookbacks etc. Then run a final output FROM that script 
  SELECT DISTINCT LDS.COHORT_NAME, LDS.SITE, LDS.EXTRACT_DTTM, LDS.LOOKBACK_YR, LDS.GENDER_DENOMINATORS_YN, LDS.CUTOFF_FILTER_YN, LDS.SUMMARY_DESCRIPTION, LDS.TABLE_NAME, LDS.NUM_DX1, LDS.NUM_DX2, LDS.MED_USE1, LDS.MED_USE2
    , LDS.MAMMOGRAPHY, LDS.PAP_TEST, LDS.PSA_TEST, LDS.COLONOSCOPY, LDS.FECAL_OCCULT_TEST, LDS.FLU_SHOT, LDS.PNEUMOCOCCAL_VACCINE, LDS.BMI, LDS.A1C, LDS.MEDICAL_EXAM, LDS.INP1_OPT1_VISIT, LDS.OPT2_VISIT, LDS.ED_VISIT
    , LDS.MDVISIT_PNAME2, LDS.MDVISIT_PNAME3, LDS.Routine_care_2, LDS.SUBJECTS_NOCRITERIA, LDS.PREDICTIVE_SCORE_CUTOFF
    , LDS.MEAN_10YR_PROB, LDS.MEDIAN_10YR_PROB, LDS.MODE_10YR_PROB, LDS.STDEV_10YR_PROB
    , LDS.PERCENT_POPULATION
    , LDS.PERCENT_SUBJECTS_FEMALE
    , LDS.PERCENT_SUBJECTS_MALE
    , LDS.AVERAGE_FACT_COUNT
    , LDS.RUNTIME_MS
  FROM DBO.DT_LOYALTY_RESULT_SUMMARY LDS
  WHERE LDS.SUMMARY_DESCRIPTION = 'PERCENT SUBJECTS' 
    AND LDS.LOOKBACK_YR = @LOOKBACK_YEARS
    AND LDS.GENDER_DENOMINATORS_YN =  IIF(@GENDERED=0,'N','Y')
    AND LDS.SITE = @SITE
    AND LDS.COHORT_NAME IN (SELECT COHORT_NAME FROM #COHORT_FILTER)
  ORDER BY LDS.COHORT_NAME, LDS.CUTOFF_FILTER_YN, LDS.TABLE_NAME;